name: Build precompiled NIFs

on:
  push:
    branches:
      - main
    paths:
      - "native/**"
      - ".github/workflows/release.yml"
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  actions: read
env:
  PROJECT_VERSION: ${{ github.ref_name }} # gets "v0.1.10" on tag runs
  # List the NIF versions you ship (order matters; newer first)
  RUSTLER_NIF_VERSIONS: "2.16 2.15"
  # List all target triples you build (must match your matrix)
  RUSTLER_TARGETS: |
    aarch64-apple-darwin
    x86_64-apple-darwin
    x86_64-unknown-linux-gnu
    x86_64-unknown-linux-musl

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.15", "2.16"]
        job:
          - { target: aarch64-apple-darwin, os: macos-14 }
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04 }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-22.04 }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}

      - name: Install musl tools (for musl targets)
        if: startsWith(matrix.job.os, 'ubuntu') && contains(matrix.job.target, 'musl')
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build the NIF manually
        shell: bash
        run: |
          cd native/ex_jsonschema
          NIF_FEATURE="nif_version_${{ matrix.nif }}"
          NIF_FEATURE="${NIF_FEATURE//./_}"   # replace '.' with '_'
          VER="${PROJECT_VERSION#v}"  
          cargo build --release --target ${{ matrix.job.target }} --features "$NIF_FEATURE"

          mkdir temp
          # Select source extension based on platform
          if [[ "${{ matrix.job.os }}" =~ ^macos ]]; then
            SOURCE_EXT=".dylib"
          else
            SOURCE_EXT=".so"
          fi
          # Name the inner file exactly as rustler_precompiled will try to dlopen
          FINAL_NAME="libex_jsonschema-v${VER}-nif-${{ matrix.nif }}-${{ matrix.job.target }}.so"

          cp "target/${{ matrix.job.target }}/release/libex_jsonschema${SOURCE_EXT}" "temp/${FINAL_NAME}"
          tar -czf "${FINAL_NAME}.tar.gz" -C temp "${FINAL_NAME}"

          echo "FILE_NAME=${FINAL_NAME}.tar.gz" >> $GITHUB_ENV
          echo "FILE_PATH=$(pwd)/${FINAL_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}
          path: ${{ env.FILE_PATH }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.FILE_PATH }}
        if: startsWith(github.ref, 'refs/tags/')

  publish_hex:
    name: Publish to Hex.pm
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build_release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18'
          otp-version: '26'

      - name: Install dependencies
        run: mix deps.get
        env:
          EX_JSONSCHEMA_BUILD: "1"
      
      - name: Generate rustler_precompiled checksum file
        env:
          EX_JSONSCHEMA_BUILD: "1"

        run: MIX_ENV=prod mix rustler_precompiled.download ExJsonschema.Native --all --ignore-unavailable --print

      - name: Publish to Hex
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
          EX_JSONSCHEMA_BUILD: "1"
        run: |
          mix hex.publish --yes