name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build_nif:
    name: Build NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.15", "2.17"]
        job:
          - { target: arm64-apple-darwin     , os: macos-14       , use-cross: false }
          - { target: x86_64-apple-darwin    , os: macos-13       , use-cross: false }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04 , use-cross: false }
          - { target: x86_64-pc-windows-msvc, os: windows-2022   , use-cross: false }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=ex_jsonschema" >> $GITHUB_ENV
          echo "PROJECT_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}

      - name: Install cross
        if: matrix.job.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Show version information
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Build the project
        shell: bash
        run: |
          cd native/ex_jsonschema
          
          if [[ "${{ matrix.job.use-cross }}" == "true" ]]; then
            cross build --release --target=${{ matrix.job.target }}
          else
            cargo build --release --target=${{ matrix.job.target }}
          fi

      - name: Rename lib to the final name
        shell: bash
        run: |
          cd native/ex_jsonschema
          LIB_PREFIX="lib"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) LIB_PREFIX="" ;;
          esac
          
          # The file extension is .so for Linux/macOS, .dll for Windows
          LIB_EXTENSION="so"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) LIB_EXTENSION="dll" ;;
            *-apple-darwin) LIB_EXTENSION="dylib" ;;
          esac
          
          BUILT_LIB="target/${{ matrix.job.target }}/release/${LIB_PREFIX}ex_jsonschema.${LIB_EXTENSION}"
          FINAL_LIB="libex_jsonschema.${LIB_EXTENSION}"
          
          echo "Built lib: $BUILT_LIB"
          echo "Final lib: $FINAL_LIB"
          
          cp "${BUILT_LIB}" "${FINAL_LIB}"

      - name: Create archive
        shell: bash
        run: |
          cd native/ex_jsonschema
          LIB_EXTENSION="so"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) LIB_EXTENSION="dll" ;;
            *-apple-darwin) LIB_EXTENSION="dylib" ;;
          esac
          
          ARCHIVE_NAME="libex_jsonschema-v${{ env.PROJECT_VERSION }}-nif-${{ matrix.nif }}-${{ matrix.job.target }}.${LIB_EXTENSION}.tar.gz"
          echo "Archive name: $ARCHIVE_NAME"
          tar -czf "$ARCHIVE_NAME" "libex_jsonschema.${LIB_EXTENSION}"
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "ASSET_PATH=native/ex_jsonschema/$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build_nif]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: "v${{ env.PROJECT_VERSION }}"
          tag_name: "v${{ env.PROJECT_VERSION }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_hex:
    name: Publish to Hex.pm
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build_nif, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.15'
          otp-version: '26.0'

      - name: Install dependencies
        run: mix deps.get

      - name: Create checksum file
        run: |
          # Download the release artifacts to generate checksums
          curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest \
            | grep "browser_download_url.*tar.gz" \
            | cut -d '"' -f 4 \
            | wget -qi -
          
          # Generate checksums
          sha256sum *.tar.gz > checksum-Elixir.ExJsonschema.Native.exs
          
          # Format as Elixir map
          echo '%{' > temp_checksum
          while IFS= read -r line; do
            hash=$(echo $line | cut -d' ' -f1)
            filename=$(echo $line | cut -d' ' -f2)
            echo "  \"$filename\" => \"sha256:$hash\"," >> temp_checksum
          done < <(sha256sum *.tar.gz)
          echo '}' >> temp_checksum
          
          mv temp_checksum checksum-Elixir.ExJsonschema.Native.exs

      - name: Publish to Hex
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
        run: |
          mix hex.publish --yes 