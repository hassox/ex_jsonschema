name: Build precompiled NIFs

on:
  push:
    branches:
      - main
    paths:
      - "native/**"
      - ".github/workflows/release.yml"
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.15", "2.16"]
        job:
          - { target: aarch64-apple-darwin, os: macos-14 }
          - { target: x86_64-apple-darwin, os: macos-13 }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04 }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-22.04 }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract project version
        shell: bash
        run: |
          echo "PROJECT_VERSION=$(sed -n 's/.*@version *"\(.*\)".*/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}

      - name: Install musl tools (for musl targets)
        if: startsWith(matrix.job.os, 'ubuntu') && contains(matrix.job.target, 'musl')
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build the NIF manually
        shell: bash
        run: |
          cd native/ex_jsonschema
          NIF_FEATURE="nif_version_${{ matrix.nif }}"
          NIF_FEATURE="${NIF_FEATURE//./_}"   # replace '.' with '_'
          cargo build --release --target ${{ matrix.job.target }} --features "$NIF_FEATURE"

          mkdir temp
          # Select source extension based on platform
          if [[ "${{ matrix.job.os }}" =~ ^macos ]]; then
            SOURCE_EXT=".dylib"
          else
            SOURCE_EXT=".so"
          fi
          # Copy and rename to ex_jsonschema.so for RustlerPrecompiled
          cp target/${{ matrix.job.target }}/release/libex_jsonschema${SOURCE_EXT} temp/ex_jsonschema.so
          tar -czf libex_jsonschema-v${{ env.PROJECT_VERSION }}-nif-${{ matrix.nif }}-${{ matrix.job.target }}.so.tar.gz -C temp ex_jsonschema.so
          echo "FILE_NAME=libex_jsonschema-v${{ env.PROJECT_VERSION }}-nif-${{ matrix.nif }}-${{ matrix.job.target }}.so.tar.gz" >> $GITHUB_ENV
          echo "FILE_PATH=$(pwd)/libex_jsonschema-v${{ env.PROJECT_VERSION }}-nif-${{ matrix.nif }}-${{ matrix.job.target }}.so.tar.gz" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}
          path: ${{ env.FILE_PATH }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.FILE_PATH }}
        if: startsWith(github.ref, 'refs/tags/')

  publish_hex:
    name: Publish to Hex.pm
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build_release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18'
          otp-version: '26'

      - name: Install dependencies
        run: mix deps.get
      
      # ⬅️ 1) Pull all tarballs produced by the build job(s)
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: precompiled

      # ⬅️ 2) Stage them where the Mix task will find them (repo root is simplest)
      - name: Stage precompiled archives at project root
        shell: bash
        run: |
          shopt -s globstar
          mv precompiled/**/*.tar.gz . || true


      # ⬅️ 3) Generate the checksum file from local tarballs
      - name: Generate rustler_precompiled checksum file
        env:
          EX_JSONSCHEMA_BUILD: "1"

        run: MIX_ENV=prod mix rustler_precompiled.download ExJsonschema.Native --only-local

      - name: Publish to Hex
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
          EX_JSONSCHEMA_BUILD: "1"
        run: |
          mix hex.publish --yes